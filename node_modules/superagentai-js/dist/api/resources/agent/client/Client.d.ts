/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as SuperAgent from "../../..";
export declare namespace Agent {
    interface Options {
        environment?: core.Supplier<environments.SuperAgentEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
}
export declare class Agent {
    protected readonly _options: Agent.Options;
    constructor(_options: Agent.Options);
    /**
     * List all agents
     */
    list(): Promise<SuperAgent.AgentList>;
    /**
     * Create a new agent
     * @throws {@link SuperAgent.UnprocessableEntityError}
     */
    create(request: SuperAgent.AppModelsRequestAgent): Promise<SuperAgent.AppModelsResponseAgent>;
    /**
     * Get a single agent
     * @throws {@link SuperAgent.UnprocessableEntityError}
     */
    get(agentId: string): Promise<SuperAgent.AppModelsResponseAgent>;
    /**
     * Patch an agent
     * @throws {@link SuperAgent.UnprocessableEntityError}
     */
    update(agentId: string, request: SuperAgent.AppModelsRequestAgent): Promise<SuperAgent.AppModelsResponseAgent>;
    /**
     * Delete an agent
     * @throws {@link SuperAgent.UnprocessableEntityError}
     */
    delete(agentId: string): Promise<unknown>;
    /**
     * Invoke an agent
     * @throws {@link SuperAgent.UnprocessableEntityError}
     */
    invoke(agentId: string, request: SuperAgent.AppModelsRequestAgentInvoke): Promise<SuperAgent.AppModelsResponseAgentInvoke>;
    /**
     * Add LLM to agent
     * @throws {@link SuperAgent.UnprocessableEntityError}
     */
    addLlm(agentId: string, request: SuperAgent.AppModelsRequestAgentLlm): Promise<SuperAgent.AppModelsResponseAgent>;
    /**
     * Remove LLM from agent
     * @throws {@link SuperAgent.UnprocessableEntityError}
     */
    removeLlm(agentId: string, llmId: string): Promise<unknown>;
    /**
     * List agent tools
     * @throws {@link SuperAgent.UnprocessableEntityError}
     */
    listTools(agentId: string): Promise<SuperAgent.AgentToolList>;
    /**
     * Add tool to agent
     * @throws {@link SuperAgent.UnprocessableEntityError}
     */
    addTool(agentId: string, request: SuperAgent.AppModelsRequestAgentTool): Promise<SuperAgent.AppModelsResponseAgent>;
    /**
     * Remove tool from agent
     * @throws {@link SuperAgent.UnprocessableEntityError}
     */
    removeTool(agentId: string, toolId: string): Promise<unknown>;
    /**
     * List agent datasources
     * @throws {@link SuperAgent.UnprocessableEntityError}
     */
    listDatasources(agentId: string): Promise<SuperAgent.AgentDatasosurceList>;
    /**
     * Add datasource to agent
     * @throws {@link SuperAgent.UnprocessableEntityError}
     */
    addDatasource(agentId: string, request: SuperAgent.AppModelsRequestAgentDatasource): Promise<SuperAgent.AppModelsResponseAgent>;
    /**
     * Remove datasource from agent
     * @throws {@link SuperAgent.UnprocessableEntityError}
     */
    removeDatasource(agentId: string, datasourceId: string): Promise<unknown>;
    /**
     * List agent runs
     * @throws {@link SuperAgent.UnprocessableEntityError}
     */
    listRuns(agentId: string): Promise<SuperAgent.AgentRunList>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
