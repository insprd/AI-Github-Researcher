/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as SuperAgent from "../../..";
export declare namespace Datasource {
    interface Options {
        environment?: core.Supplier<environments.SuperAgentEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
}
export declare class Datasource {
    protected readonly _options: Datasource.Options;
    constructor(_options: Datasource.Options);
    /**
     * List all datasources
     */
    list(): Promise<SuperAgent.DatasourceList>;
    /**
     * Create a new datasource
     * @throws {@link SuperAgent.UnprocessableEntityError}
     */
    create(request: SuperAgent.AppModelsRequestDatasource): Promise<SuperAgent.AppModelsResponseDatasource>;
    /**
     * Get a specific datasource
     * @throws {@link SuperAgent.UnprocessableEntityError}
     */
    get(datasourceId: string): Promise<SuperAgent.AppModelsResponseDatasource>;
    /**
     * Update a specific datasource
     * @throws {@link SuperAgent.UnprocessableEntityError}
     */
    update(datasourceId: string, request: SuperAgent.AppModelsRequestDatasource): Promise<SuperAgent.AppModelsResponseDatasource>;
    /**
     * Delete a specific datasource
     * @throws {@link SuperAgent.UnprocessableEntityError}
     */
    delete(datasourceId: string): Promise<unknown>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
